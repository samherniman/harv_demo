---
title: "README"
format: 
  gfm: default
  html: default
  ipynb: default
---

## Tree detection and segmentation at Harvard Forest

The following includes downloading and preprocessing steps as well as the tree detection and segmentation.

## Setup

Install packages

```{r}
#| eval: false
install.packages(c("pak", "neonOS", "neonUtilities", "here"))
pak::pak("samherniman/easytrees")
```

Setup parallel processing and the output directory

```{r}
#| warning: false
#| error: false
#| eval: false
future::plan(future::multisession, workers = 8L)
lidR::set_lidr_threads(4)
lasR::set_parallel_strategy(lasR::nested(2, 4L))
```
```{r}
output_dir <- here::here("data/derivative")
```

This downloads two tiles of the Harvard Forest NEON ALS

```{r}
#| eval: false

neonUtilities::byTileAOP(
  dpID = "DP1.30003.001",
  site = "HARV",
  year = "2022",
  easting = 732183,
  northing = 4713265,
  buffer = 200,
  savepath = here::here("data/raw/las/harv")
)
```

Read in the ALS point clouds

```{r}
ctg <- lidR::readLAScatalog(here::here("data/raw/las/harv"), recursive = TRUE)
# plot(ctg, mapview = TRUE)
ctg <- ctg[1,]
```

Excecute the preprocessing pipeline. This pipeline classifies ground points and normalizes the point clouds, it then creates a DTM (which is not used), and pitfilled CHM.  

```{r}
#| output: false
#| warning: false
#| error: false
pipeline <- 
  easytrees::setup_pipeline(output_dir) |> 
  easytrees::create_pipeline()

ans = lasR::exec(pipeline, on = ctg)
```

## Tree detection

Read in the normalized point clouds, CHM, and create a function for tree detection

```{r}
#| output: false
#| warning: false
#| error: false
ctg <- lidR::readLAScatalog(
  fs::path(output_dir, "normalized")
)

chm <- terra::rast(fs::path(output_dir, "chm", "chm.tif"))

f <- function(x) {
  y <- 2.6 * (-(exp(-0.08*(x-2)) - 1)) + 3
  y[x < 2] <- 3
  y[x > 20] <- 5
  return(y)
}
lidR::opt_chunk_size(ctg) <- 5000
```

```{r}
ctg
```


Carry out tree detection

```{r}
#| output: false
#| warning: false
#| error: false
ttops <- lidR::locate_trees(ctg, lidR::lmf(f), uniqueness = "bitmerge")
ttops$treeID <- 1:nrow(ttops)
sf::st_write(ttops, fs::path(output_dir, "treetops", "treetops.fgb"), append = FALSE)
```

```{r}
ttops
```


Create the segmentation algorithm and run it

```{r}
#| output: false
#| warning: false
#| error: false
#| eval: true
algo3 <- lidR::watershed(chm, th_tree = 2, tol = 1, ext = 1)
lidR::opt_laz_compression(ctg) <- TRUE
lidR::opt_output_files(ctg) <- paste0(output_dir, "/clouds/water_{XCENTER}_{YCENTER}_d")
ctg <- lidR::segment_trees(ctg, algo3, attribute = "IDwater")
```

```{r}
ctg
```

## Create convex hulls around each segmented tree

Needs some cleaning up

```{r}
ctg <- lidR::readLAScatalog(
  fs::path(output_dir, "clouds")
)
lidR::opt_chunk_size(ctg) <- 50000

```

```{r}
#| output: false
#| warning: false
#| error: false
library(lidR)
# las <- lidR::readLAS(ctg[1,])
cm_las <- lidR::crown_metrics(ctg, func = .stdtreemetrics, attribute = "IDwater", geom = "concave") |> 
  dplyr::filter(convhull_area < 400) |> 
  sf::st_make_valid()
# removed all trees that are greater than 400 square meters in area
# because those ones usually have really weird hulls
```

```{r}
#| output: false
#| warning: false
#| error: false
sf::st_write(cm_las, fs::path(output_dir, "hulls.fgb"), append = FALSE)
```

## Visualize

```{r}
#| warning: false
#| error: false
baba_ras <- here::here("data/derivative/baba/baba.tif") |> 
# baba_ras <- here::here("data/derivative/chm/chm.tif") |> 

  terra::rast()
```

```{r}
#| warning: false
#| error: false
#| eval: false
library(terra)
plot(baba_ras$z_p95)
plot(baba_ras$z_above10)
baba_ras$understory <- 100 - baba_ras$z_above3
plot(baba_ras$understory)
```


## rayshader

```{r}
elmat <- here::here("data/derivative/dtm/dtm.tif") |> 
  raster::raster() |> 
  rayshader::raster_to_matrix()
library(rayshader)
```

```{r}
elmat |> 
  sphere_shade(texture = "desert") |> 
  add_shadow(ray_shade(elmat), 0.5) |> 
   plot_map()
```

```{r}
library(terra)
dtm <- here::here("data/derivative/dtm/dtm.tif") |> terra::rast()
dtm_prod <- terra::terrain(dtm, v = c("slope", "aspect"), unit = "radians")
dtm_hillshade <- terra::shade(slope = dtm_prod$slope, aspect = dtm_prod$aspect)

plot(dtm_hillshade, col =gray(0:30/30), legend = FALSE)
```


